[project]
name = "arcade"
description = "Arcade Game Development Library"
readme = "README.md"
authors = [{ name = "Paul Vincent Craven", email = "paul@cravenfamily.com" }]
license = { file = "license.rst" }
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Intended Audience :: Developers",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: Implementation :: CPython",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
dependencies = [
    # Use pyglet's development branch as a rolling release package
    # at the cost of slow download and constant pip install -I -e .[dev]
    "pyglet@git+https://github.com/pyglet/pyglet.git@development#egg=pyglet",
    # Expected future dev preview release on PyPI (not yet released)
    # pyglet == 2.1dev4
    "pillow~=10.2.0",
    "pymunk~=6.6.0",
    "pytiled-parser~=2.2.5",
]
dynamic = ["version"]

[project.urls]
Homepage = "https://api.arcade.academy"
Documentation = "https://api.arcade.academy/"
Examples = "https://api.arcade.academy/en/latest/examples/index.html"
Issues = "https://github.com/pythonarcade/arcade/issues"
Source = "https://github.com/pythonarcade/arcade"
Book = "https://learn.arcade.academy"

[project.optional-dependencies]
# Used for dev work
dev = [
    # --- Documentation: Sphinx 7 based currently
    "sphinx==7.3.7",  # April 2024 | Updated 2024-07-15, 7.4+ is broken with sphinx-autobuild
    "sphinx_rtd_theme==2.0.0",  # Nov 2023
    "sphinx-rtd-dark-mode==1.3.0",
    "sphinx-autobuild==2024.4.16",  # April 2024 | Due to this, Python 3.10+ is required to serve docs
    "sphinx-copybutton==0.5.2", # April 2023
    "sphinx-sitemap==2.6.0",  # April 2024
    "pygments==2.17.2",  # 2.18 has breaking changes in lexer
    "docutils==0.20.1",  # ?
    # "pyyaml==6.0.1",
    # "readthedocs-sphinx-search==0.3.2",
    # "sphinx-autodoc-typehints==2.0.1",
    # --- tools and build
    "pytest",
    "pytest-cov",
    "pytest-mock",
    "coverage",
    "coveralls",  # Do we really need this?
    "black",
    "ruff",
    "mypy",
    "pyright==1.1.355",    
    "typer[all]==0.11.0",  # Needed for make.py
    "wheel",
]
# Testing only
testing_libraries = ["pytest", "pytest-mock", "pytest-cov", "pyyaml==6.0.1"]

[project.scripts]
arcade = "arcade.management:execute_from_command_line"

[project.entry-points.pyinstaller40]
hook-dirs = "arcade.__pyinstaller:get_hook_dirs"

[tool.setuptools.packages.find]
include = ["arcade", "arcade.*"]

[tool.setuptools.dynamic]
version = { attr = "arcade.version.VERSION" }

[build-system]
requires = ["setuptools", "wheel"]
build-backend = "setuptools.build_meta"


[tool.ruff]
# --- Description of what we ignore ---
#
# E731 do not assign a lambda expression, use a def
# E741 Ambiguous variable name
# F811: redefinition
line-length = 100
output-format = "full"
exclude = [
    "venv",
    ".venv*",
    "tests",
    "build",
    "doc",
    "util",
    ".mypy_cache",
    ".pytest_cache",
    "temp",
    "bugs",
    "arcade/examples/platform_tutorial",
]
lint.ignore = ["E731", "E741"]
lint.select = [
    "E",
    "F",
    # Whitespace linting must be re-enabled manually for ruff
    # see https://beta.ruff.rs/docs/configuration/#using-pyprojecttoml
    "W",
]

# This ignores __init__.py files and examples for import sorting
[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["I"]
"arcade/examples/*" = ["I"]
"arcade/gui/examples/*" = ["I"]
"util/*" = ["I"]
"benchmarks/*" = ["I"]

[tool.mypy]
disable_error_code = "annotation-unchecked"

[tool.pytest.ini_options]
norecursedirs = [
    "doc",
    "holding",
    "arcade/examples",
    "build",
    ".venv",
    "env",
    "dist",
    "tempt",
]

[tool.pyright]
include = ["arcade"]
exclude = [
    "venv",
    "arcade/__pyinstaller",
    "arcade/examples",
    "arcade/experimental",
    "tests",
    "doc",
    "make.py",
]
typeCheckingMode = "basic"
# Use type info from pytiled_parser and pyglet, which do not ship `py.typed` file
useLibraryCodeForTypes = true
reportMissingTypeStubs = "none"
# Ignore diagnostics about values that might be `None`
reportOptionalCall = "none"
reportOptionalContextManager = "none"
reportOptionalIterable = "none"
reportOptionalMemberAccess = "none"
reportOptionalOperand = "none"
reportOptionalSubscript = "none"

[tool.coverage.run]
source = ["arcade"]
omit = [
    "./arcade/examples/*",
    "./arcade/gui/examples/*",
    "./arcade/experimental/*",
    "./env/*",
    "./tests/*",
    "./doc/*",
    "./Win*/*",
]

[tool.black]
line-length = 100
force-exclude = '''
(
  doc
  | arcade/examples
  | arcade/gui/examples
  | tests
  | util
  | benchmarks
)
'''

[[tool.mypy.overrides]]
module = "pyglet.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "PIL.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pymunk.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "pytiled_parser.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "PyInstaller.*"
ignore_missing_imports = true
